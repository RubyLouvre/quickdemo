<template>
  <div class="pagewrap">
    <refresh refreshing="{{refreshing}}" @refresh="onPullDownRefresh">
      <list @scroll="onPageScroll" @scrollbottom="onReachBottom">
        <list-item type='a' style="flex-direction: column;">
          <slot></slot>
          <div for="{{list}}">
            <text>{{$item}}</text>
          </div>
        </list-item>
      </list>
    </refresh>
    <div class="tabBar" if="{{tabBar.list.length}}" style="background-color:{{tabBar.backgroundColor}}">
      <div class="tab" for="(index, item) in tabBar.list" onclick="onSelected(index, item)">
        <image src="{{ selectedIndex === index ? item.selectedIconPath : item.iconPath }}" /> 
        <a style="color:{{ selectedIndex === index ? tabBar.selectedColor: tabBar.color }}">
         {{item.text}}
        </a>
      </div>
    </div>
  </div>
</template>
<style>
  .pagewrap {
    display: flex;
    flex: 1;
    flex-direction: column;
    width: 100%;
    padding-bottom: 150px;
  }

  .tabBar {
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 150px;
  }

  .tabBar .tab {
    flex: 1;
    margin: 10px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .tabBar .tab image {
    width:60px;
    height: 60px;
  }
  .tabBar .tab a {
    margin: 10px;
    border: 1px solid #eeeeee;
  }
</style>
<script>
  import prompt from '@system.prompt';
  import router from '@system.router'
  import { shareObject } from '../../utils';
  export default {
    props: {
      list: Array,
      tabBar: Object,
      selectedIndex: Number,
      refreshing: Boolean
    },
    onReady() {
      shareObject.currentPageWrapper = this;
     
    },
    onShow() {
    },
    onInit() {
      this.selectedIndex = 0;
      this.tabBar = {
        list: []
      }
      var cc = shareObject.pageConfig;
      if (cc) {
        cc.titleBar = {
          text: cc.navigationBarTitleText || "",
          textColor: cc.navigationBarTextStyle || "white",
          backgroundColor: cc.navigationBarBackgroundColor || "#000",
          menu: true
        }
        this.$page.setTitleBar(cc.titleBar)
        var tabBar = cc.tabBar;
        if (tabBar && tabBar.list && tabBar.list.length) {
          tabBar.backgroundColor = tabBar.backgroundColor || "#f9faf5";
          tabBar.color = tabBar.color || "#000";
          tabBar.selectedColor = tabBar.selectedColor || "blue";
          this.tabBar = tabBar;
        }
      }
      this.list = Array.apply(null, { length: 100 }).map(Math.random)
    },
    onShow() {
      var cc = shareObject.pageConfig;
      if (cc) {
        this.$page.setTitleBar(cc.titleBar)
        var tabBar = cc.tabBar;
        if (tabBar && tabBar.list && tabBar.list.length) {
          this.tabBar = tabBar;
        }
      }
    },
    onReachBottom() {
      var cc = shareObject.page;
      if(cc.onReachBottom){
        cc.onReachBottom(e)
      }
      prompt.showToast({ message: 'reach bottom' });
    },
    onPageScroll(e) {
      var cc = shareObject.page;
      if(cc.onPageScroll){
        cc.onPageScroll(e)
      }
    },
    onSelected(index, item) {
      console.log("pageWraper onSelected", item.pagePath)
      this.selectedIndex = index;
      var cc = shareObject.page;
      if(cc.onTabItemTap){
        cc.onTabItemTap(item)
      }
      router.push ({
        uri: item.pagePath
      })
    },
    onShareAppMessage(){

    },
    onPullDownRefresh() {
      var cc = shareObject.pageConfig;
      var cp = shareObject.page;
      if (cc.enablePullDownRefresh && cp.onPullDownRefresh) {
        cp.onPullDownRefresh()
        console.log("pageWraper onPullDownRefresh")
        this.list = Array.apply(null, { length: 100 }).map(Math.random);
        prompt.showToast({ message: 'refreshed' });
        this.refreshing = true
        setTimeout(() => {
          this.refreshing = false
        })
      }
    }
  };
</script>